Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:
3 <= nums.length <= 3000
-105 <= nums[i] <= 105


class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if len(nums)<3:
            return []
        elif len(nums)==3 and sum(nums)==0:
            return [nums]
        nums=sorted(nums)
        i=0
        solutions=[]
        while(i<len(nums)-2):
            if i>0 and nums[i]==nums[i-1]:
                i+=1
                continue
            j=i+1
            k=len(nums)-1
            target=0-nums[i]
            while(j<k):
                if j>i+1 and nums[j]==nums[j-1]:
                    j+=1
                    continue
                if  k<len(nums)-1 and nums[k]==nums[k+1]:
                    k-=1
                    continue
                jksum=nums[j]+nums[k]
                if jksum==target:
                    solutions.append([nums[i],nums[j],nums[k]])
                if jksum>target:
                    k-=1
                else:
                    j+=1
                   
            i+=1
        return solutions









