You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1





class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        # Initialize two pointers and the maximum area
        left, right = 0, len(height) - 1
        max_area = 0
        
        # Iterate while the two pointers don't cross each other
        while left < right:
            # Calculate the width between the two pointers
            width = right - left
            # Calculate the height of the container as the minimum of the two heights
            current_height = min(height[left], height[right])
            # Calculate the area with the current container
            current_area = width * current_height
            # Update the maximum area if the current area is larger
            max_area = max(max_area, current_area)
            
            # Move the pointer with the shorter height inward
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
        
        return max_area
